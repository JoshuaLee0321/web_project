// This example uses MediaRecorder to record from a live audio stream,
// and uses the resulting blob as a source for an audio element.
//
// The relevant functions in use are:
//
// navigator.mediaDevices.getUserMedia -> to get audio stream from microphone
// MediaRecorder (constructor) -> create MediaRecorder instance for a stream
// MediaRecorder.ondataavailable -> event to listen to when the recording is ready
// MediaRecorder.start -> start recording
// MediaRecorder.stop -> stop recording (this will generate a blob of data)
// URL.createObjectURL -> to create a URL from a blob, which we can use as audio src

var recordButton, stopButton, recorder;

function record_init() {
  
  recordButton = document.getElementById('record');
  stopButton = document.getElementById('stop');
  // get audio stream from user's mic
  navigator.mediaDevices.getUserMedia({
    audio: true
  })
  .then(function (stream) {
    recordButton.disabled = false;
    recordButton.addEventListener('click', startRecording);
    stopButton.addEventListener('click', stopRecording);
    //recorder = new MediaRecorder(stream, {mimeType: 'audio/webm'});
    recorder = new MediaRecorder(stream);
	//console.dir(recorder.mimeType);
    // listen to dataavailable, which gets triggered whenever we have
    // an audio blob available
    recorder.addEventListener('dataavailable', onRecordingReady);
  });
};

function startRecording() {
  recordButton.disabled = true;
  stopButton.disabled = false;

  recorder.start();
}

function stopRecording() {
  recordButton.disabled = false;
  stopButton.disabled = true;
  // Stopping the recorder will eventually trigger the `dataavailable` event and we can complete the recording process
  recorder.stop();
}

function onRecordingReady(e) {
  var audio = document.getElementById('audio');
  // e.data contains a blob representing the recording
  audio.src = URL.createObjectURL(e.data);
  //audio.play();
  upload(e.data);
}

function upload(blob) {
 // console.log("test upload");
  var xhr=new XMLHttpRequest();
  var token="eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJpc3MiOiJKV1QiLCJhdWQiOiJ3bW1rcy5jc2llLmVkdS50dyIsInNlcnZpY2UiOiI4ODgiLCJ1c2VybmFtZSI6Imxvcm5lIiwic2NvcGVzIjoiMSIsInN1YiI6IjIiLCJpYXQiOjE1MzMwMzcxMDEsImV4cCI6MTU5NjEwOTEwMSwibmJmIjoxNTMzMDM3MTAxfQ.ROgcmbmXS2KYmsKkdZCI3UI56iLdLneXlKaj4qJujCYSqlpPKOHVN9J0eHR_OrYg-sMQEf06XiO52KqO-makYBJ5bRe134M8UcU06XrkC6v0KUMtJHtkBTpCAIIa14__ifZjlFFA4EGcX4DY0r8XFEkuEpEu3Gb_88_fJmUquXw";
  var data=token+"@@@S07     W"

  xhr.onload=function(e) {
	if(this.readyState == 4) {
	//	console.log("Server returned: ",e.target.responseText);
		var array=JSON.parse(xhr.responseText)
		//console.log(array);
		document.getElementById("outputSentence").innerHTML=array.message;

	}
  };
  xhr.open("POST","http://140.116.245.217:2803",true);
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  console.log(data);
  //xhr.send(data+blob);
  xhr.send(blob);
  
}

